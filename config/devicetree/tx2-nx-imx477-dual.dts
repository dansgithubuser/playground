/*
This file allows use of IMX477 on TX2 NX.

Steps to use this file:
1. copy to TX2 NX
2. `dtc -o /boot/tx2-nx-imx477-dual.dtbo tx2-nx-imx477-dual.dts`
3. use jetson-io to apply
	- one way: `python3 /opt/nvidia/jetson-io/config-by-hardware.py -n 2=tx2-nx-imx477-dual`

If you're using a Xavier NX carrier board, and you're seeing "Multiple APP partitions mounted!"
(make sure to surface an error if you're seeing nothing, for example because of `jetson-io.py`'s use of `curses`),
try adding `if not mount: continue` to `_board_partition_is_mounted`.

To get translated sources:
1. go to https://developer.nvidia.com/embedded/linux-tegra-r3274
2. download "Driver Package (BSP) Sources" for TX2: https://developer.nvidia.com/downloads/embedded/l4t/r32_release_v7.4/sources/t186/public_sources.tbz2
3. unzip `public_sources.tbz2`
4. `cd public_sources/Linux_for_Tegra/source/public/kernel_src/hardware`
5. unzip `kernel_src.tbz2`
6. `cd kernel_src/hardware`

Internal Names:
Jakku	Xavier NX Developer Kit
Lanai	TX2 NX
Porg	Jetson Nano Developer Kit, or Jetson Nano	https://forums.developer.nvidia.com/t/confusing-in-board-name-for-the-jetson-nano-developer-kit/79547/2
Quill	TX2

Part Numbers:
https://developer.nvidia.com/embedded/faq#jetson-part-numbers
Seems like ...-.xxxx-....-... becomes pxxxx.
p3448	Jetson Nano (SODIMM male)
p3449	Jetson Nano carrier board (SODIMM female)
p3450	Jetson Nano Developer Kit (p3448 + p3449)
p3509	Jetson Xavier NX carrier board (SODIMM female)
p3636	Jetson TX2 NX (SODIMM male)
p3668	Jetson Xavier NX
*/

/dts-v1/;
/plugin/;

/ {
	overlay-name = "tx2-nx-imx477-dual";
	jetson-header-name = "Jetson Nano CSI Connector";
	compatible = "nvidia,p3449-0000+p3636-0001", "nvidia,p3509-0000+p3636-0001";

	/*
	This is a translation of
	nvidia/platform/t19x/jakku/kernel-dts/common/tegra194-camera-jakku-rbpcv3-imx477.dtsi
	*/
	fragment@0 {
		//target = <&i2c_0>;
		target-path = "/cam_i2cmux/i2c@0";
		__overlay__ {
			rbpcv3_imx477_a@1a {
				//reset-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
				reset-gpios = <&tegra_main_gpio 104 0>;
			};
		};
	};
	fragment@1 {
		//target = <&i2c_1>;
		target-path = "/cam_i2cmux/i2c@1";
		__overlay__ {
			rbpcv3_imx477_c@1a {
				//reset-gpios = <&tegra_main_gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
				reset-gpios = <&tegra_main_gpio 107 0>;
			};
		};
	};

	/*
	This is a translation of
	nvidia/platform/t19x/jakku/kernel-dts/common/tegra194-camera-rbpcv3-imx477.dtsi
	*/
	fragment@4 {
		target-path = "/cam_i2cmux/i2c@0/rbpcv3_imx477_a@1a";
		__overlay__ {
			compatible = "ridgerun,imx477";
			/* I2C device address */
			reg = <0x1a>;

			/* V4L2 device node location */
			devnode = "video0";

			/* Physical dimensions of sensor */
			physical_w = "7.564";
			physical_h = "5.476";

			sensor_model = "imx477";

			use_sensor_mode_id = "true";

			/**
			* ==== Modes ====
			* A modeX node is required to support v4l2 driver
			* implementation with NVIDIA camera software stack
			*
			* == Signal properties ==
			*
			* phy_mode = "";
			* PHY mode used by the MIPI lanes for this device
			*
			* tegra_sinterface = "";
			* CSI Serial interface connected to tegra
			* Incase of virtual HW devices, use virtual
			* For SW emulated devices, use host
			*
			* pix_clk_hz = "";
			* Sensor pixel clock used for calculations like exposure and framerate
			*
			* readout_orientation = "0";
			* Based on camera module orientation.
			* Only change readout_orientation if you specifically
			* Program a different readout order for this mode
			*
			* == Image format Properties ==
			*
			* active_w = "";
			* Pixel active region width
			*
			* active_h = "";
			* Pixel active region height
			*
			* pixel_t = "";
			* The sensor readout pixel pattern
			*
			* line_length = "";
			* Pixel line length (width) for sensor mode.
			*
			* == Source Control Settings ==
			*
			* Gain factor used to convert fixed point integer to float
			* Gain range [min_gain/gain_factor, max_gain/gain_factor]
			* Gain step [step_gain/gain_factor is the smallest step that can be configured]
			* Default gain [Default gain to be initialized for the control.
			*     use min_gain_val as default for optimal results]
			* Framerate factor used to convert fixed point integer to float
			* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
			* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
			* Default Framerate [Default framerate to be initialized for the control.
			*     use max_framerate to get required performance]
			* Exposure factor used to convert fixed point integer to float
			* For convenience use 1 sec = 1000000us as conversion factor
			* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
			* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
			* Default Exposure Time [Default exposure to be initialized for the control.
			*     Set default exposure based on the default_framerate for optimal exposure settings]
			*
			* gain_factor = ""; (integer factor used for floating to fixed point conversion)
			* min_gain_val = ""; (ceil to integer)
			* max_gain_val = ""; (ceil to integer)
			* step_gain_val = ""; (ceil to integer)
			* default_gain = ""; (ceil to integer)
			* Gain limits for mode
			*
			* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
			* min_exp_time = ""; (ceil to integer)
			* max_exp_time = ""; (ceil to integer)
			* step_exp_time = ""; (ceil to integer)
			* default_exp_time = ""; (ceil to integer)
			* Exposure Time limits for mode (sec)
			*
			* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
			* min_framerate = ""; (ceil to integer)
			* max_framerate = ""; (ceil to integer)
			* step_framerate = ""; (ceil to integer)
			* default_framerate = ""; (ceil to integer)
			* Framerate limits for mode (fps)
			*
			* embedded_metadata_height = "";
			* Sensor embedded metadata height in units of rows.
			* If sensor does not support embedded metadata value should be 0.
			*/
			mode0 { /* IMX477_MODE_3840x2160 */
				mclk_khz = "24000";
				num_lanes = "2";
				tegra_sinterface = "serial_a";
				phy_mode = "DPHY";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "3840";
				active_h = "2160";
				mode_type = "bayer";
				pixel_phase = "rggb";
				csi_pixel_bit_depth = "10";
				readout_orientation = "90";
				line_length = "11200";
				inherent_gain = "1";
				mclk_multiplier = "80";
				pix_clk_hz = "840000000";

				gain_factor = "16";
				framerate_factor = "1000000";
				exposure_factor = "1000000";
				min_gain_val = "16"; /* 1.00x */
				max_gain_val = "356"; /* 22x */
				step_gain_val = "1";
				default_gain = "16"; /* 1.00x */
				min_hdr_ratio = "1";
				max_hdr_ratio = "1";
				min_framerate = "2000000"; /* 2.0 fps */
				max_framerate = "30000000"; /* 30.0 fps */
				step_framerate = "1";
				default_framerate = "30000000"; /* 30.0 fps */
				min_exp_time = "13"; /* us */
				max_exp_time = "683709"; /* us */
				step_exp_time = "1";
				default_exp_time = "2495"; /* us */

				embedded_metadata_height = "2";
			};
			mode1 { /* IMX477_MODE_1920X1080 */
				mclk_khz = "24000";
				num_lanes = "2";
				tegra_sinterface = "serial_a";
				phy_mode = "DPHY";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "1920";
				active_h = "1080";
				mode_type = "bayer";
				pixel_phase = "rggb";
				csi_pixel_bit_depth = "10";
				readout_orientation = "90";
				line_length = "7000";
				inherent_gain = "1";
				mclk_multiplier = "80";
				pix_clk_hz = "840000000";

				gain_factor = "16";
				framerate_factor = "1000000";
				exposure_factor = "1000000";
				min_gain_val = "16"; /* 1.00x */
				max_gain_val = "356"; /* 22x */
				step_gain_val = "1";
				default_gain = "16"; /* 1.00x */
				min_hdr_ratio = "1";
				max_hdr_ratio = "1";
				min_framerate = "2000000"; /* 2.0 fps */
				max_framerate = "60000000"; /* 60.0 fps */
				step_framerate = "1";
				default_framerate = "60000000"; /* 60.0 fps */
				min_exp_time = "13"; /* us */
				max_exp_time = "683709"; /* us */
				step_exp_time = "1";
				default_exp_time = "2495"; /* us */

				embedded_metadata_height = "2";
			};

			ports {
				#address-cells = <1>;
				#size-cells = <0>;

				port@0 {
					reg = <0>;
					rbpcv3_imx477_dual_out0: endpoint {
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_imx219_csi_in0 >; // /host1x/nvcsi@150c0000/channel@0/ports/port@0/endpoint@0
					};
				};
			};
		};
	};

	fragment@5 {
		target-path = "/cam_i2cmux/i2c@1/rbpcv3_imx477_c@1a";
		__overlay__ {
			compatible = "ridgerun,imx477";
			/* I2C device address */
			reg = <0x1a>;

			/* V4L2 device node location */
			devnode = "video1";

			/* Physical dimensions of sensor */
			physical_w = "7.564";
			physical_h = "5.476";

			sensor_model = "imx477";

			use_sensor_mode_id = "true";

			mode0 { /* IMX477_MODE_3840x2160 */
				mclk_khz = "24000";
				num_lanes = "2";
				tegra_sinterface = "serial_c";
				phy_mode = "DPHY";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "3840";
				active_h = "2160";
				mode_type = "bayer";
				pixel_phase = "rggb";
				csi_pixel_bit_depth = "10";
				readout_orientation = "90";
				line_length = "11200";
				inherent_gain = "1";
				mclk_multiplier = "80";
				pix_clk_hz = "840000000";

				gain_factor = "16";
				framerate_factor = "1000000";
				exposure_factor = "1000000";
				min_gain_val = "16"; /* 1.00x */
				max_gain_val = "356"; /* 22x */
				step_gain_val = "1";
				default_gain = "16"; /* 1.00x */
				min_hdr_ratio = "1";
				max_hdr_ratio = "1";
				min_framerate = "2000000"; /* 2.0 fps */
				max_framerate = "30000000"; /* 30.0 fps */
				step_framerate = "1";
				default_framerate = "30000000"; /* 30.0 fps */
				min_exp_time = "13"; /* us */
				max_exp_time = "683709"; /* us */
				step_exp_time = "1";
				default_exp_time = "2495"; /* us */

				embedded_metadata_height = "2";
			};
			mode1 { /* IMX477_MODE_1920X1080 */
				mclk_khz = "24000";
				num_lanes = "2";
				tegra_sinterface = "serial_c";
				phy_mode = "DPHY";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "1920";
				active_h = "1080";
				mode_type = "bayer";
				pixel_phase = "rggb";
				csi_pixel_bit_depth = "10";
				readout_orientation = "90";
				line_length = "7000";
				inherent_gain = "1";
				mclk_multiplier = "80";
				pix_clk_hz = "840000000";

				gain_factor = "16";
				framerate_factor = "1000000";
				exposure_factor = "1000000";
				min_gain_val = "16"; /* 1.00x */
				max_gain_val = "356"; /* 22x */
				step_gain_val = "1";
				default_gain = "16"; /* 1.00x */
				min_hdr_ratio = "1";
				max_hdr_ratio = "1";
				min_framerate = "2000000"; /* 2.0 fps */
				max_framerate = "60000000"; /* 60.0 fps */
				step_framerate = "1";
				default_framerate = "60000000"; /* 60.0 fps */
				min_exp_time = "13"; /* us */
				max_exp_time = "683709"; /* us */
				step_exp_time = "1";
				default_exp_time = "2495"; /* us */

				embedded_metadata_height = "2";
			};

			ports {
				#address-cells = <1>;
				#size-cells = <0>;

				port@0 {
					reg = <0>;
					rbpcv3_imx477_out1: endpoint {
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_imx219_csi_in1>; // /host1x/nvcsi@150c0000/channel@1/ports/port@0/endpoint@2
					};
				};
			};
		};
	};

	fragment@6 {
		target-path = "/tegra-camera-platform";
		__overlay__ {
			/**
			* Physical settings to calculate max ISO BW
			*
			* num_csi_lanes = <>;
			* Total number of CSI lanes when all cameras are active
			*
			* max_lane_speed = <>;
			* Max lane speed in Kbit/s
			*
			* min_bits_per_pixel = <>;
			* Min bits per pixel
			*
			* vi_peak_byte_per_pixel = <>;
			* Max byte per pixel for the VI ISO case
			*
			* vi_bw_margin_pct = <>;
			* Vi bandwidth margin in percentage
			*
			* max_pixel_rate = <>;
			* Max pixel rate in Kpixel/s for the ISP ISO case
			*
			* isp_peak_byte_per_pixel = <>;
			* Max byte per pixel for the ISP ISO case
			*
			* isp_bw_margin_pct = <>;
			* Isp bandwidth margin in percentage
			*/
			//num_csi_lanes = <4>;
			//max_lane_speed = <1500000>;
			//min_bits_per_pixel = <10>;
			//vi_peak_byte_per_pixel = <2>;
			//vi_bw_margin_pct = <25>;
			max_pixel_rate = <7500000>;
			//isp_peak_byte_per_pixel = <5>;
			//isp_bw_margin_pct = <25>;

			/**
			 * The general guideline for naming badge_info contains 3 parts, and is as follows,
			 * The first part is the camera_board_id for the module; if the module is in a FFD
			 * platform, then use the platform name for this part.
			 * The second part contains the position of the module, ex. "rear" or "front".
			 * The third part contains the last 6 characters of a part number which is found
			 * in the module's specsheet from the vendor.
			 */
			modules {
				module0 {
					badge = "lanai_front_IMX477";
					//position = "front";
					//orientation = "1";
					drivernode0 {
						//pcl_id = "v4l2_sensor";
						devname = "imx477 9-001a";
						proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/rbpcv3_imx477_a@1a";
					};
				};
				module1 {
					badge = "lanai_rear_IMX477";
					//position = "rear";
					//orientation = "1";
					drivernode0 {
						//pcl_id = "v4l2_sensor";
						devname = "imx477 10-001a";
						proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/rbpcv3_imx477_c@1a";
					};
				};
			};
		};
	};

	/*
	This is a translation of
	nvidia/platform/t19x/jakku/kernel-dts/tegra194-p3668-all-p3509-0000-camera-imx477-dual.dts
	*/
	fragment@7 {
		target-path = "/cam_i2cmux";
		__overlay__ {
			i2c@0 {
				rbpcv3_imx477_a@1a {
					status = "okay";
				};
				rbpcv2_imx219_a@10 {
					status = "disabled";
				};
			};
			i2c@1 {
				rbpcv3_imx477_c@1a {
					status = "okay";
				};
				rbpcv2_imx219_c@10 {
					status = "disabled";
				};
			};
		};
	};
	fragment@8 {
		target-path = "/tegra-camera-platform/modules";
		__overlay__ {
			module0 {
				status = "okay";
				//badge = "lanai_front_RBPCV3";
				//position = "front";
				//orientation = "1";
				drivernode0 {
					status = "okay";
					//pcl_id = "v4l2_sensor";
					//devname = "imx477 9-001a";
					//proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/rbpcv3_imx477_a@1a";
				};
			};
			module1 {
				status = "okay";
				//badge = "lanai_rear_RBPCV3";
				//position = "rear";
				//orientation = "1";
				drivernode0 {
					status = "okay";
					//pcl_id = "v4l2_sensor";
					//devname = "imx477 10-001a";
					//proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/rbpcv3_imx477_c@1a";
				};
			};
		};
	};
	fragment@9 {
		target-path = "/host1x";
		__overlay__ {
			vi@15700000 {
				ports {
					port@0 {
						endpoint {
							status = "okay";
							//port-index = <0>;
							//bus-width = <2>;
							//remote-endpoint = <&rbpcv3_imx477_csi_out0>;
						};
					};
					port@1 {
						endpoint {
							status = "okay";
							//port-index = <2>;
							//bus-width = <2>;
							//remote-endpoint = <&rbpcv3_imx477_csi_out1>;
						};
					};
				};
			};
			nvcsi@150c0000 {
				channel@0 {
					ports {
						port@0 {
							endpoint@0 {
								status = "okay";
								//port-index = <0>;
								//bus-width = <2>;
								remote-endpoint = <&rbpcv3_imx477_dual_out0>; // /cam_i2cmux/i2c@0/rbpcv3_imx477_a@1a/ports/port@0/endpoint
							};
						};
						port@1 {
							endpoint@1 {
								status = "okay";
							};
						};
					};
				};
				channel@1 {
					ports {
						port@0 {
							endpoint@2 {
								status = "okay";
								//port-index = <2>;
								//bus-width = <2>;
								remote-endpoint = <&rbpcv3_imx477_out1>; // /cam_i2cmux/i2c@1/rbpcv3_imx477_c@1a/ports/port@0/endpoint
							};
						};
						port@1 {
							endpoint@3 {
								status = "okay";
							};
						};
					};
				};
			};
		};
	};
};
