#!/usr/bin/env python3

#===== imports =====#
import argparse
import subprocess

#===== args =====#
parser = argparse.ArgumentParser()
parser.add_argument('number', nargs='?', type=int)
parser.add_argument('command', nargs=argparse.REMAINDER)
args = parser.parse_args()

#===== helpers =====#
def invoke(invocation, out=False):
    if out:
        return subprocess.check_output(invocation.split()).decode('utf-8')
    else:
        return subprocess.run(invocation.split(), check=True)

#===== main =====#
#----- get container -----#
lines = invoke('docker ps', out=True).splitlines()
containers = sorted([i.split()[-1] for i in lines[1:]])
print('Number Name')
for i, container in enumerate(containers):
    print('{:6} {}'.format(i+1, container))
print()
print('Number of container to enter:', end=' ')
if args.number != None:
    i = args.number
    print(i, flush=True)
else:
    i = int(input())
print()

#----- run command -----#
container = containers[i - 1]

def invoke_container(invocation, **kwargs):
    return invoke('docker exec -it {} {}'.format(container, invocation), **kwargs)

if args.command:
    pwd = invoke_container('pwd', out=True).strip()
    command = ' '.join(args.command)
    print('{}:{}$ {}'.format(container, pwd, command))
    invoke_container(command)
else:
    for shell in ['/bin/bash', '/bin/sh']:
        print('Trying {}.'.format(shell))
        try:
            invoke_container(shell)
        except Exception as e:
            if getattr(e, 'returncode', None) == 126:
                print("{} doesn't seem to be available.".format(shell))
                continue
        break
    else:
        raise Exception("Couldn't find a shell to run.")
